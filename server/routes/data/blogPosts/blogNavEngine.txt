

I love tetris. And I really mean it, I mean in high school I spent hours a day of valuable apply-to-college
time on my favorite tetris site, jstris.js. Many people will still think of the Atari game on the Nintendo
64, which althrough a wonderful game, is very different from the modern Tetris I play. And "play" may be a
bit inaccurate to what I did. I studied. I poured over the foremost literature on new strategies and techniques,
from the bog-standard T-spin to DT cannons, perfect clear set-ups, T-spin double and T-spin triple setups. 2-, 3-, and
4- wide combo set ups and execution, efficiency in placement, called Finesse. I adjusted my ARR, my DAR,
my keybindings, my hand positioning.

I was really into it (clearly). I might stil have a draft bouncing around somewhere in my laptop of a College essay written
on Tetris (I didn't submit it, I am deeply thankful for to this day). Something that tetris-enthusiasts (tetreheads,
we call ourselves (we being just me)) all collectively have agreed upon experiencing is something called the Tetris
Effect. The Tetris Effect occurs when you play too much tetris, and your everyday life and every night sleep becomes
plagued with falling blocks (tetronimoes, they are actually called) of all sorts, t-blocks, L- and J- blocks ... the
ever-missing Line block that has even punctured out of nerd-dom and into popular culture. In the height of my
Tetris career/obsession, I had a really strong case of Tetris Effect. When I'd close my eyes, I'd see blocks fitting
together, imagining ways different tetronimoes could stack, and playing imaginary games of tetris in my head. I'd
look out the window on a drive, and imagine how pieces could fit into the suburuban skyline, how if only I had a z-piece
I could fit it between those trees... I would dream in tetris. It is no wonder many Tetris fanatics find it important
to take breaks every once and a while.

These days, I have left my Tetris habit behind in the realm of hobby-hood. I pick it up every now and then, but my 40-line time and my Attack-rate are far from what I would average at 17. I've exchanged it for going outside and touching grass. But the habit of fitting things together remains.
In designing the navigation page for my blog, I knew I wanted to do something reminicient of that youthful exuberance
for a simple game. I wanted pieces that fit together, creating variation horizontally, as my portfolio display does, but
also vertically. This presented a clear challenge. In my portfolio display, I could deal with each row independently,
creating templates that would look interesting next to each other. The challenge with that engine was to pull the
necessary sized card to fit into the template that is chosen above all. For this project, it became near impossible
to approach with a template-based solution. I developed an algorithm I have dubbed ASSIGN-AND-BUMP.

ASSIGN-AND-BUMP:
1) Assign each post a size. To do so, we first assign each post an importance. This is judged off of four criteria, that
have differing priorities over each other.
a) First, is an override score. This is used if I wanted to manually place an element somewhere. For the most part, this
is 0.
b) Second, is a chronology. Posts are grouped in sets of 8, and each of these sets are placed together, with the more
recent being placed higher.
c) Third, is an admin-added importance score. This would be for the big projects, or the projects I was particularly
proud of, and would bump a post to the top of the chronological set of 8 it was in.
d) Finally, is user-determined score. This would could the number of user visits to a site, and rank it accordingly.

2) Once we have our posts ranked by importance, and thus assigned sizes (with the more important posts assigned larger
sizes), we move into the BUMP part of the algorithm.
a) First, we rank each post/block by its size, with the largest first. Consider them all to be flat (except the 2x2, which is a square).
b) We start our recursion, which is passed the state of the current row, if rows above it have intruded on its space, what empty spaces remain. The first iteration starts with [0, 0, 0, 0].
c) We go through our sorted post/block list, starting with the largest/most important. If it fits anywhere in the row, place it there. We continue this until the row is full.
c2) If we go through the entire list of post/blocks, and space remains in the row, we consider rotating long pieces.
We will only rotate 1x3 and 1x2 pieces. First, we reduce all 1x3 to 1x2 pieces, and then consider if any of these
now 2x1 pieces fit into our row (still prioritize the formerly 1x3 pieces).
c3) Remove the post/block from the list of post/blocks to add.
d) With each post/block added to the row, also record how it affects the next row. This applies to 2x2 blocks, as well
as 1x3 and 1x2 blocks that have been rotated.
e) An important rule is that you cannot repeat placing any block-shapes immediately, unless there is no other solution.
This keeps things interesting.
f) Pass the state of the next row after the current row is filled to the next iteration, restore all blocks to their
original state, and recurse back to (b).



You may have noticed some interesting things about this algorithm. The first is that the depth of a block is at most 2.
This is because with any more, you risk creating what I call "blockers", and would exacerbate the problem described next.
Plus, the depth of 2 is already very interesting. Another problem is that this algorithm may leave gaps in the completed
grid. Exactly how many gaps I have yet to determine, but I am thinking of making some way to plug them. Perhaps by extending
adjacent blocks, into non quadrilateral shapes, or by adding little placeholders. This algorithm reduces this, especially with less 1x3 blocks.

An addition I am thinking of adding is to flip entire layouts around the y-axis any time the algorithm encounters a clean
split, where a row has no emission into the row below it.

Now, it works fine for the low number of posts I have, with conducting the calculations on the frontend. Later, when
I add a backend to this site, I'll run it in the backend, with whatever I decide to write it in.

I find that this solution creates layouts that achieve my goal of looking interesting, and remind me of the gentler days
of my tetris-filled youth.

If you'd like to play with this algorithm, I have a sketch of it available to mess-with written in Python. It is not the
best written thing, and was implemented cleaner in the final Typescript version.



